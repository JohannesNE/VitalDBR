<<<<<<< HEAD
install.packages('curl')
library(curl)
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f')
library(httr)
install.packages("httr2")
library(httr2)
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f')
library(httr)
install.packages("httr2")
library(httr2)
install.packages("httr2")
library(curl)
r <- GET('https://api.vitaldb.net/trks')
library(httr)
library(httr2)
r <- GET('https://api.vitaldb.net/trks')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f', add_headers )
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f')
r <- GET('https://api.vitaldb.net/trks')
bin <- content(r, "raw")
writeBin(bin, "myfile.txt")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f')
library(httr)
library(httr2)
install.packages('jsonlist')
library(httr)
library(httr2)
library(jsonlite)
library(Rcurl)
install.packages('Rcurl')
install.packages('RCurl')
library(RCurl)
getURL('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
<<<<<<< HEAD
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f')
library(httr)
library(httr2)
library(httr)
library(httr2)
library(httr)
library(httr2)
```{r}
library(curl)
library(curl)
Input:
* Track
* Interval
* # Cases
```{r}
r <- GET('https://api.vitaldb.net/trks')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f', add_headers(`Accept-Encoding` = "gzip, deflate"))
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f', add_headers('Accept-Encoding' = "gzip, deflate"))
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f', add_headers('Accept-Encoding' = "gzip, deflate, br"))
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f', add_headers('Accept-Encoding' = "gzip, deflate, br, txt"))
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f', add_headers(Accept-Encoding = "gzip, deflate, br, txt"))
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers(Accept = "")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers(Accept = ""))
View(g)
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers(Accept = ""))
bin <- content(g, "raw")
writeBin(bin, "asd")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers(Accept = "gzip"))
bin <- content(g, "raw")
writeBin(bin, "asd")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers(Accept = "csv"))
bin <- content(g, "raw")
writeBin(bin, "asd")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers(Accept = "xml"))
bin <- content(g, "raw")
writeBin(bin, "asd")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers(Accept = ".xml"))
bin <- content(g, "raw")
writeBin(bin, "asd")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers(Accept-Encoding = "gzip"))
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers("Accept-Encoding" = "gzip"))
bin <- content(g, "raw")
writeBin(bin, "asd")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3', add_headers("Accept-Encoding" = ".xml"))
bin <- content(g, "raw")
writeBin(bin, "asd")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3')
bin <- content(g, "raw")
writeBin(bin, "asd")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/0f0b9e7cf1bc0c63ce9d645b363ecd23ffd38c41')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
g <- GET('https://api.vitaldb.net/labs')
=======
library(data.table)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
d <- fread("data.csv.gz", sep = ',')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
library(R.utils)
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
d <- fread("data.csv.gz", sep = ',')
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
d <- fread("data.csv.gz", sep = ',')
library(R.utils)
gunzip("file.csv.gz", remove=FALSE)
install.packages("R.utils")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
d <- fread("data.csv.gz", sep = ',')
library(R.utils)
gunzip("data.csv.gz", remove=FALSE)
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
test <- (url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz")
d <- fread("data.csv.gz", sep = ',')
gunzip("data.csv.gz", remove=FALSE)
install.packages("R.utils")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
test <- file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
test <- file(https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f)
install.packages("R.utils")
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
#install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
test <- file(https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f)
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
#install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
test <- file("https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f")
d <- fread("data.csv.gz", sep = ',')
gunzip("data.csv.gz", remove=FALSE)
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
#install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
test <- file("https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f")
print(test)
#d <- fread("data.csv.gz", sep = ',')
#gunzip("data.csv.gz", remove=FALSE)
#fd869e25ba82a66cc95b38ed47110bf4f14bb368
library(data.table)
#install.packages("R.utils")
library(R.utils)
download.file(url = "https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f.csv.gz",
destfile = file.path("data.csv.gz"))
test <- file("https://api.vitaldb.net/afd182c102c5af625d3f217280b3766d453d9e3f")
d <- fread(test, sep = ',')
>>>>>>> acc35417e9654d978fe98ac7e880f5f02767d28e
=======
load_case(c("BIS/EMG","Primus/INSP_DES"), 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
print("load_trk")
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame(NA_col = rep(NA, length(tids)))
index <- 1
for (i in 1:nrow(tids)){
data[index] <- load_trk(tids[i])
index <- index+1
}
return(data)
}
load_case <- function(tnames, caseid){
# Den her skal retrieve Tids
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
#extract tids where tname = tname
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case(c("BIS/EMG","Primus/INSP_DES"), 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
print("load_trk")
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame(NA_col = rep(NA, length(tids)))
index <- 1
for (i in 1:nrow(tids)){
data[index] <- load_trk(tids[i,])
index <- index+1
}
return(data)
}
load_case <- function(tnames, caseid){
# Den her skal retrieve Tids
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
#extract tids where tname = tname
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case(c("BIS/EMG","Primus/INSP_DES"), 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
print("load_trk")
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame(col = rep(NA, length(tids)))
index <- 1
for (i in 1:nrow(tids)){
data$col[index] <- load_trk(tids[i,])
index <- index+1
}
return(data)
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case(c("BIS/EMG","Primus/INSP_DES"), 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
print("load_trk")
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
data[index] <- load_trk(tids[i,])
index <- index+1
}
return(data)
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case(c("BIS/EMG","Primus/INSP_DES"), 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
print("load_trk")
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
data[index] <- load_trk(tids[i,])
index <- index+1
}
return(data)
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case("BIS/EMG", 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
print("load_trk")
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
print(load_VDB(url))
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
data[index] <- load_trk(tids[i,])
index <- index+1
}
return(data)
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case("BIS/EMG", 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
print("load_trk")
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
print(load_VDB(url))
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
print(tids[i,])
data[index] <- load_trk(tids[i,])
index <- index+1
}
return(data)
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case("BIS/EMG", 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
print(load_VDB(url))
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
print(tids[i,])
data[index] <- load_trk(tids[i,])
index <- index+1
}
return(data)
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case("BIS/EMG", 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
print(load_VDB(url))
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
load_trk(tids[i,])
index <- index+1
}
return(data)
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case("BIS/EMG", 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
print(load_VDB(url))
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
load_trk(tids[i,])
index <- index+1
}
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case("BIS/EMG", 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
print(load_VDB(url))
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
load_trk(tids[i,])
index <- index+1
}
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case("BIS/EMG","Solar8000/BT" 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
print(load_VDB(url))
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
load_trk(tids[i,])
index <- index+1
}
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case("BIS/EMG","Solar8000/BT", 1)
# Brugeren inputter én eller flere tnames i load_case, f.eks. c(BIS/EMG, Primus/INSP_DES, Solar8000/BT)
# Brugeren inputter også ét (og kun ét) case id. f.eks. "17"
# Funktionen samler nu alle "tids" forbundet med de forskellige tnames i case 1. ( i det her tilfælde 3 stk.)
# Funktionen kalder nu load_trks(tids), der kalder load_trk(tid) som kalder load vdb (der henter fra api) på alle tid i tids
# dermed bliver der returnet 3 tidsserier c(BIS/EMG, Primus/INSP_DES, Solar8000/BT), der alle tilhører case 17
load_VDB <- function(file_url) {
con <- gzcon(url(file_url))
txt <- readLines(con)
return(read.csv(textConnection(txt)))
}
load_trk <- function(tid){
start <- "https://api.vitaldb.net/"
end <- ".csv.gz"
# start + tid + end
url <- paste(start, tid, end, sep="")
print(load_VDB(url))
return(load_VDB(url))
}
load_trks <- function(tids){
data <- data.frame()
index <- 1
for (i in 1:nrow(tids)){
load_trk(tids[i,])
index <- index+1
}
}
load_case <- function(tnames, caseid){
tracks <- load_VDB("https://api.vitaldb.net/trks.csv.gz")
tracks <- tracks[tracks$caseid == caseid,]
tids <- data.frame(col = rep(NA, length(tnames)))
index <- 1
for (tname in tnames){
tids$col[index] <- (tracks[tracks$tname == tname,])$tid
index <- index+1
}
load_trks(tids)
}
load_case(c("BIS/EMG","Solar8000/BT"), 1)
>>>>>>> test
